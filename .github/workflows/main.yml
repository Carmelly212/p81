name: 'p81'

on:
  push:
  #   branches:
  #   - main

jobs:
  infra:
    name: 'deploy'
    runs-on: ubuntu-20.04

    outputs:
      CLOUDFRONT_URL: ${{ steps.env.outputs.CLOUDFRONT_URL }}
      BUCKET_ID: ${{ steps.env.outputs.BUCKET_ID }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      p81ENV: ${{ vars.p81ENV }}
    steps:
    # # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set environment variables from .env
      run: |
        ls -h
        if [ -f .env ]; then
          export $(cat .env | xargs)
        fi
      working-directory: ./terraform/

    - name: Print environment variables
      run: |
        # echo "environmet name from .env file as $p81ENV =  $p81ENV"
        echo "$p81ENV"
        echo "$p81ENV"
        echo "$p81ENV"

    # - name: Update package lists
    #   run: sudo apt-get update
    # - name: Install unzip
    #   run: sudo apt-get install unzip


    # # Install the latest version of Terragrunt CLI and configure the Terragrunt CLI configuration file with a Terragrunt Cloud user API token
    # - name: Setup Terraform v1.3.7
    #   uses: hashicorp/setup-Terraform@v1
    #   with:
    #     terraform_version: 1.3.7
    #     terraform_wrapper: false
    # - name: Setup Terraform version
    #   run: terraform --version
    # - name: Setup Terraform wrapper path
    #   run: which terraform

    # - name: Setup Terragrunt version 0.35.16
    #   uses: autero1/action-terragrunt@v1.1.0
    #   with:
    #     terragrunt_version: 0.35.16
    #     token: ${{ secrets.GITHUB_TOKEN }}

    # - name: Export outputs from terrafrom to GITHUB_OUTPUT
    #   id: env
    #   run: |
    #     echo CLOUDFRONT_URL=$(cd cloudfront && terragrunt output -raw cloudfront_url) >> $GITHUB_OUTPUT
    #     echo BUCKET_ID=$(cd s3 && terragrunt output -raw bucket_id) >> $GITHUB_OUTPUT

    # Initialize a new or existing Terragrunt working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Debug Environment Variables
      run: |
        echo "AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID"
        echo "AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY"
        echo "AWS_REGION: $AWS_REGION"
        echo "P81ENV: $P81ENV"


    # - name: Terragrunt Init in dev environment
    #   run: terragrunt init --terragrunt-non-interactive
    #   working-directory: ./terraform/environments/dev
  
    # - name: Terragrunt plan
    #   run: terragrunt run-all plan --terragrunt-non-interactive
    #   working-directory: ./terraform/environments/dev

  code:
    name: Run Python Script
    runs-on: ubuntu-20.04
    needs: infra
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      p81ENV: ${{ vars.p81ENV }}
      # CLOUDFRONT_URL: ${{ needs.infra.outputs.CLOUDFRONT_URL }}
      # BUCKET_ID: ${{ needs.infra.outputs.BUCKET_ID }}
      CLOUDFRONT_URL: d1fddevmotqu0j.cloudfront.net
      BUCKET_ID: alon-p81-dev02-bucket
    steps:
      - name: Use Environment Variables in Next Stage
        run: |
            echo $CLOUDFRONT_URL
            echo $BUCKET_ID
            
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: '3.x' 

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests boto3

      - name: Execute Python script
        run: ./data_processing.py
        working-directory: ./python
